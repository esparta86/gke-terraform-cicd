// Lisandro Antonio Rafaelano Colocho -  DevOps
//
// This Jenkinsfile allows create a smart pipeline in order to deploy in production, if there are changes in master branch.
//
// ------------------ Variables global ----------------
//
//  @appNameI Contain the name of the image as you pushed into registrer.
//  @project contains the name project in GCP

//
// -------------- Sonar stage -------------------------
//
// @projectKey contains the name of project in sonnarqbe
// @source contains the directory of java
// @binaries contains the classes compiled 
// @javaVersion contains the java version
// @tokenSonar contains the id token provided by sonnar when you has been created a project.
// @warname contains the name of war generated by maven

// -- variables deploy into kubernetes
def deploymentApp = "src-deployment/k8s/deployment/deploy.yaml"
def nodeportserviceApp = "src-deployment/k8s/services/testing/nodeport.yaml"

def namespace = "development-a"


def project = 'ti-is-devenv-01'
def appNameI = 'globalwalletapp'
def pipelineName = 'global-helloworld-deployment' //This is the name that you should to put in Jenkins when you are going to create a pipeline or job
def branchName = "testing-hard"
def imageTag = "gcr.io/${project}/${appNameI}:${branchName}.${env.BUILD_NUMBER}"
def imageTagBase = "gcr.io/ti-is-devenv-01/globalwalletapp:v1"
//def imageContainerBaseM = "maven:3.6.0-jdk-8"
def imageContainerBaseM = "gcr.io/ti-is-devenv-01/maven-3-6-jdk8:v5"
def nameImageM = "maven"
def changesCommit = 'FALSE'
def changesLog = ""
def projectKey = "is-global-wallet"
def sources = "globalwalletapp/src/main/java"
def binaries = "globalwalletapp/target/classes"
def javaVersion = "1.8"
def tokenSonar = "d3142e0782984dc107c4820881a00f82c51cea71"
def warname = "is-web-global-wallet.war"
def warnameSnapshot = "global-wallet-0.0.1-SNAPSHOT.war"
def versionApp  = "0.0.1"
def rollbackDeploy = 'FALSE'
// New Jenkins changed the default workspace , before it was /home/jenkins/workspace/
def  workspacePipeline = "/home/jenkins/agent/workspace/${pipelineName}"

def  emailsList = 'lisandro.rafaelano@telusinternational.com'

def sendNotificationSlack(String buildResult = 'STARTED') {

  buildResult = buildResult ?: 'SUCCESS'
  
  if(currentBuild.changeSets.size() > 0 ){
 	  // Default values
	  def colorName = 'RED'
	  def colorCode = '#FF0000'
	  def subject = "${buildResult} :  Integration Job '${env.JOB_NAME} Build# [$env.BUILD_NUMBER]"
	  def summary = "${subject} (${env.BUILD_URL})"
	  def detail = """<p>${buildResult} : Integration Job '${env.JOB_NAME} Build# [$env.BUILD_NUMBER]':</p>
           <p> If the build is successful, there are new changes in SBC Integration Tool in IS-CLUSTER by Kubernetes </p>
				   <p> Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""
    if( buildResult == 'STARTED'){
		 color = 'YELLOW'
		 colorCode = '#FFFF00'
	  }else if( buildResult == 'SUCCESS'){
		 color = 'GREEN'
		 colorCode = '#00FF00'
	  }else{
		 color = 'RED'
		 colorCode = '#FF0000'
	  }
	  slackSend color: colorCode, message : summary
  }
}

def getChangeString() {
    MAX_MSG_LEN = 100
    def changeString = "<table>"
    echo "Gathering SCM changes"
    def changeLogSets = currentBuild.changeSets
    for (int i = 0; i < changeLogSets.size(); i++) {
        def entries = changeLogSets[i].items
        for (int j = 0; j < entries.length; j++) {
            def entry = entries[j]
            truncated_msg = entry.msg.take(MAX_MSG_LEN)
            changeString += " <tr><td> - ${truncated_msg} [${entry.author}]</td></tr>"
        }
    }

    if (!changeString) {
        changeString = " - No new changes"
    }
    changeString += "</table>"
    return changeString
}


pipeline {
  agent {
    kubernetes {
      label "hello-world-app"
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
labels:
  component: ci
spec:
  serviceAccountName: jenkins
  containers:
  - name:  jnlp
    tty: true   
  - name: awscli
    image: amazon/aws-cli
    command:
    - cat
    tty: true
  - name: kubectl
    image: gcr.io/cloud-builders/kubectl
    command:
    - cat
    tty: true  
"""
}
  }
 options {
    timeout(time: 30, unit: 'MINUTES')
  }
stages {
  
   stage('Start'){
      when {
           expression { currentBuild.changeSets.size() > 0 }
        }
      steps {
          script{
              if(currentBuild.changeSets.size() > 0) {
                    changesCommit = 'TRUE'
                    git branch: 'testing-hard', url: 'https://github.com/esparta86/tf-safe-deployment'
                }
                else {
                    changesCommit = 'FALSE'
                }           
            }
         // sendNotificationSlack 'STARTED' 
        }
   }


  //         stage('GIVE ME TIME'){
  //    steps{
  //       sleep 600
  //    }
  //  }


  //  stage('SonarQube Analysis') {
  //       when {
  //          expression { currentBuild.changeSets.size() > 0 }
  //       }
  //       steps{
  //         script  {
  //                 sonarqubeScannerHome = tool 'sonarqub-scanner';
  //                 }
  //             withSonarQubeEnv('SonarIS') {
  //               sh "${sonarqubeScannerHome}/bin/sonar-scanner -Dsonar.projectKey=${projectKey}  -Dsonar.sources=${workspacePipeline}/${sources} -Dsonar.java.binaries=${workspacePipeline}/${binaries} -Dsonar.java.source=${javaVersion} -Dsonar.host.url=http://172.25.29.38:8080 -Dsonar.login=${tokenSonar} -Dsonar.exclusions=${workspacePipeline}/conf/,${workspacePipeline}/lib/ -Dsonar.sourceEncoding=UTF-8"
  //             }
  //       }
	//   }

  //  stage('SonarQube Quality Gate') {
  //     when {
  //          expression { currentBuild.changeSets.size() > 0 }
  //       }
  //       steps{
  //          script  {
  //             def qualitygate = waitForQualityGate()
  //              if (qualitygate.status == "ERROR"  ) {
  //                 error "Pipeline aborted due to quality gate coverage failure: ${qualitygate.status}"
  //              }
  //          }
  //       }
  //   }

  //      stage('GIVE ME TIME'){
  //    steps{
  //       sleep 300
  //    }
  //  }


//    stage('Create & Publish Container') {
//        when {
//               expression { currentBuild.changeSets.size() > 0 }
//             }
//       steps {
//             container('gcloud') {
//                sh "cd ${workspacePipeline}"
//                sh "PYTHONUNBUFFERED=1 gcloud builds submit -t ${imageTag} ${workspacePipeline}"
//             }
//            }
//     }

 
//   stage('Deploy to testing') {
//       when {
//            expression { currentBuild.changeSets.size() > 0 }
//           }
//       steps{
//         container('kubectl') {
         
//          sh("sed -i.bak 's#${imageTagBase}#${imageTag}#' ./${deploymentApp}")
//          sh("kubectl --namespace=${namespace} apply -f  ${deploymentApp} --record=true")

//           /** Please uncomment the next line if you have the next cases 
//              1. This is not the first deployment and It already exists
//          **/         
//          //sh("kubectl --namespace=${namespace} set image deployment/sbcintegration-deployment-testing sbcintegration-container=${imageTag} --record=true")
//           // Apply changes if there are in services yaml

//           sh("kubectl --namespace=${namespace} apply -f ${nodeportserviceApp}")
          
//         }
//       }
//     }

    



  }
  
}
